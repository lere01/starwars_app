{"version":3,"sources":["Actions/index.js","Pages/Person.js","Pages/index.js","Reducers/updateReducer.js","Reducers/rootReducer.js","Reducers/getSingleDetail.js","store.js","App.js","serviceWorker.js","index.js"],"names":["getPerson","url","a","Axios","get","result","console","log","data","DisplayPerson","ind","useState","person","setPerson","useEffect","then","x","Container","id","className","style","paddingBottom","onClick","e","target","parentNode","display","height","mass","hair_color","skin_color","eye_color","connect","UpdateReducer","data_entering","namesByUrls","check","isLoading","getAll","dispatch","response","type","payload","results","catch","error","getOne","setdata","openDetail","preventDefault","siblingID","nextSibling","document","getElementById","alignContent","alignItems","marginRight","color","width","length","map","item","reactKey","href","initialState","listOfAllNames","individualRecord","singleDetail","rootReducer","combineReducers","state","action","nameHolder","urlHolder","forEach","push","foo","GetDetail","middleware","createLogger","thunkMiddleware","composeEnhancers","compose","applyMiddleware","store","createStore","RootReducer","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d60ddea6.chunk.js","sourcesContent":["import Axios from \"axios\";\r\n\r\nexport const getAll = () => dispatch => {\r\n  const url = \"https://swapi.co/api/people\";\r\n  Axios.get(url)\r\n    .then(response => {\r\n      dispatch({\r\n        type: \"UPDATE_ALL_PERSONS\",\r\n        payload: response.data.results\r\n      });\r\n    })\r\n    .catch(error => {\r\n      return error;\r\n    });\r\n};\r\n\r\nexport const getPerson = async url => {\r\n  const result = await Axios.get(url);\r\n  console.log(result.data);\r\n  return result.data;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { getPerson } from \"../Actions/index\";\r\n\r\nconst DisplayPerson = ({ url, ind }) => {\r\n  const [person, setPerson] = useState({});\r\n  useEffect((url) => {\r\n    getPerson(url).then(x => setPerson(x));\r\n  }, []);\r\n\r\n  const closeDetail = e => {\r\n    let target = e.target.parentNode;\r\n    target.style.display = \"none\";\r\n  };\r\n\r\n  return (\r\n    <Container id={ind} className=\"inset\" style={{ paddingBottom: \"1rem\" }}>\r\n      <span id=\"close-detail\" onClick={closeDetail}>\r\n        close\r\n      </span>\r\n      {console.log(\"happening\", person)}\r\n      <p>\r\n        Height: <span className=\"detail\">{person.height}</span>\r\n      </p>\r\n      <p>\r\n        Mass: <span className=\"detail\">{person.mass}</span>\r\n      </p>\r\n      <p>\r\n        Hair Colour: <span className=\"detail\">{person.hair_color}</span>{\" \"}\r\n      </p>\r\n      <p>\r\n        Skin Colour: <span className=\"detail\">{person.skin_color}</span>{\" \"}\r\n      </p>\r\n      <p>\r\n        Eye Colour: <span className=\"detail\">{person.eye_color}</span>\r\n      </p>\r\n      {/* <p>No of Films: <span className=\"detail\">{person.films}</span> </p> */}\r\n      {/* <p>Home World: <span className=\"detail\">{person.homeworld}</span> </p> */}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default DisplayPerson;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { getAll, getPerson } from \"../Actions/index\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport \"../Style/style.css\";\r\nimport DisplayPerson from \"./Person\";\r\n\r\nconst Home = ({\r\n  getAll,\r\n  check,\r\n  data_entering,\r\n  isLoading,\r\n}) => {\r\n  const [data, setdata] = useState([]);\r\n\r\n  useEffect((data_entering, getAll) => {\r\n    getAll();\r\n    setdata(data_entering);\r\n  }, [check]);\r\n\r\n  const openDetail = e => {\r\n    e.preventDefault();\r\n    let siblingID = e.target.nextSibling.id;\r\n    let divTarget = document.getElementById(siblingID);\r\n    divTarget.style.display = \"block\";\r\n  };\r\n\r\n  return (\r\n    <Container id=\"main\" >\r\n      <Container id=\"left\" >\r\n        <div id=\"list\">\r\n          <span className=\"header-p\">Your Favourite Starwars Character</span>\r\n          {isLoading === true && (\r\n            <Container style={{ alignContent: \"center\", alignItems: \"center\" }}>\r\n              <Loader\r\n                style={{ display: \"inline-block\", marginRight: \"1rem\" }}\r\n                type=\"TailSpin\"\r\n                color=\"#000\"\r\n                height={30}\r\n                width={30}\r\n              />\r\n              <h3 style={{ display: \"inline\" }}>\r\n                Please hold on, fetching your data\r\n              </h3>\r\n            </Container>\r\n          )}\r\n          {isLoading === false &&\r\n            data.length > 1 &&\r\n            data.map((item, ind) => (\r\n              <Container>\r\n                <a\r\n                  reactKey={ind}\r\n                  href={item[1]}\r\n                  id={item[1]}\r\n                  onClick={openDetail}\r\n                >\r\n                  {item[0]}\r\n                </a>\r\n                <DisplayPerson ind={ind} url={item[1]} />\r\n              </Container>\r\n            ))}\r\n        </div>\r\n      </Container>\r\n\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ UpdateReducer }) => ({\r\n  data_entering: UpdateReducer?.namesByUrls,\r\n  check: UpdateReducer?.check,\r\n  isLoading: UpdateReducer?.isLoading,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getAll: getAll, getOne: getPerson })(\r\n  Home\r\n);\r\n","export const initialState = {\r\n  listOfAllNames: [],\r\n  namesByUrls: [],\r\n  individualRecord: [],\r\n  isLoading: true,\r\n  check: false,\r\n  singleDetail: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"UPDATE_ALL_PERSONS\":\r\n      const nameHolder = [];\r\n      const urlHolder = [];\r\n\r\n      action.payload.forEach(item => {\r\n        nameHolder.push(item[\"name\"]);\r\n        let foo = [item[\"name\"], item[\"url\"]];\r\n        urlHolder.push(foo);\r\n      });\r\n\r\n      return {\r\n        ...initialState,\r\n        listOfAllNames: nameHolder,\r\n        namesByUrls: urlHolder,\r\n        check: true,\r\n        isLoading: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport UpdateReducer from \"./updateReducer\";\r\nimport GetDetail from \"./getSingleDetail\";\r\n\r\nconst rootReducer = combineReducers({\r\n  UpdateReducer,\r\n  GetDetail\r\n});\r\n\r\nexport default rootReducer;\r\n","export default function(state = { individualRecord: [] }, action) {\r\n  switch (action.type) {\r\n    case \"GET_SINGLE_DETAILS\":\r\n      return {\r\n        ...state,\r\n        individualRecord: action.payload,\r\n        singleDetail: true\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import thunkMiddleware from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport RootReducer from \"./Reducers/rootReducer\";\r\n\r\nconst loggerMiddleware = createLogger();\r\nconst enhancers = [];\r\nconst middleware = [thunkMiddleware];\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  middleware.push(loggerMiddleware);\r\n}\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  const devToolsExtension = window?.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\n  if (typeof devToolsExtension === \"function\") {\r\n    enhancers.push(devToolsExtension());\r\n  }\r\n}\r\n\r\nconst composeEnhancers = compose(applyMiddleware(...middleware), ...enhancers);\r\nconst store = createStore(RootReducer, composeEnhancers);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Home from \"./Pages/index\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Home />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}